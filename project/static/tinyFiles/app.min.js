var app=angular.module("app",["ngRoute","ngSanitize","pageslide-directive"]).config(["$routeProvider",function(t){t.when("/",{controller:"HomeController",templateUrl:"static/views/home.html"}).when("/feed",{controller:"FeedController",templateUrl:"static/views/feed.html"}).when("/test",{controller:"SliderController",templateUrl:"static/views/test.html"}).otherwise({redirectTo:"/"})}]);app.factory("InstagramFactory",["$http",function(t){var e=function(){return t({method:"GET",url:"/instagram/feed"})};return{getInstaFeed:e}}]).filter("instaLinky",["$filter",function(t){return function(e,n){if(!e)return e;var o=t("linky")(e,n),r="";angular.isDefined(n)&&(r=' target="'+n+'"');var a=/(^|\s)#(\w*[a-zA-Z_]+\w*)/gim;o=e.replace(a,'$1<a href="https://instagram.com/explore/tags/$2"'+r+">#$2</a>");var i=/(^|\s)\@(\w*[a-zA-Z_]+\w*)/gim;return o=o.replace(i,'$1<a href="https://instagram.com/$2"'+r+">@$2</a>")}}]),app.factory("RedditFactory",["$http",function(t){var e=function(){return t({method:"GET",url:"/reddit/hot"})};return{getRedditFeed:e}}]),app.factory("SliderFactory",["$http","$q",function(t,e){var n=function(){return t({method:"GET",url:"/instagram/stats"})},o=function(){return t({method:"GET",url:"/soundcloud/stats"})},r=function(){return t({method:"GET",url:"/twitter/following"}).then(function(e){return t({method:"GET",url:"/twitter/followers"}).then(function(t){return{followers:t,following:e}})})["catch"](function(t){return t})},a=function(){return n().then(function(t){return void 0===t.data.counts?null:{followers:t.data.counts.followed_by,following:t.data.counts.follows}})},i=function(){return r().then(function(t){return void 0===t.followers.data.ids?null:{followers:t.followers.data.ids.length,following:t.following.data.ids.length}})},l=function(){return o().then(function(t){return void 0===t.data.followers_count?null:{followers:t.data.followers_count,following:t.data.followings_count}})},u=function(t){return e(function(t,e){var n={};a(n).then(function(e){n.instagram=e,l(n).then(function(e){n.soundcloud=e,i(n).then(function(e){n.twitter=e,t(n)})["catch"](function(e){n.twitter=null,t(n)})})["catch"](function(e){n.soundcloud=null,i().then(function(e){n.twitter=e,t(n)})["catch"](function(e){n.twitter=null,t(n)})})})["catch"](function(e){n.instagram=null,l(n).then(function(e){n.soundcloud=e,i(n).then(function(e){n.twitter=e,t(n)})["catch"](function(e){n.twitter=null,t(n)})})["catch"](function(e){n.soundcloud=null,i().then(function(e){n.twitter=e,t(n)})["catch"](function(e){n.twitter=null,t(n)})})})}).then(function(t){var e=[];for(var n in t)e.push({media:n,counts:t[n]});return console.log(e),e})};return{getSoundcloudStats:o,getIgStats:n,getTwitterStats:r,getFollowStats:u}}]),app.factory("SoundCloudFactory",["$http",function(t){var e=function(){return t({method:"GET",url:"/soundStream"})};return{getSongs:e}}]),app.factory("TwitterFactory",["$http",function(t){var e=function(){return t({method:"GET",url:"/tweetsfeed"})},n=function(e){return t({method:"POST",url:"/favtweet",data:{id:e}})},o=function(e){return t({method:"POST",url:"/retweet",data:{id:e}})},r=function(e){return t({method:"POST",url:"/posttweet",data:{tweet:e}})};return{getTweets:e,favTweet:n,reTweet:o,postTweet:r}}]).filter("tweetLinky",["$filter",function(t){return function(e,n){if(!e)return e;var o=t("linky")(e,n),r="";angular.isDefined(n)&&(r=' target="'+n+'"');var a=/(^|\s)#(\w*[a-zA-Z_]+\w*)/gim;o=e.replace(a,'$1<a href="https://twitter.com/search?q=%23$2"'+r+">#$2</a>");var i=/(^|\s)\@(\w*[a-zA-Z_]+\w*)/gim;return o=o.replace(i,'$1<a href="https://twitter.com/$2"'+r+">@$2</a>")}}]),app.factory("UsersFactory",["$location","$http",function(t,e){return{signup:function(t){return e({method:"POST",url:"/signup",data:t})},login:function(t){return console.log("factory"),e({method:"POST",url:"/login",data:t})},logout:function(t){return e({method:"POST",url:"/logout",data:t})}}}]),app.factory("PanelFactory",[function(){return{checked:!1}}]),app.factory("PostType",function(){return{twitter:!1,instagram:!1,soundcloud:!1,reddit:!1}}),app.controller("FeedController",["$scope","PanelFactory","RedditFactory","TwitterFactory","InstagramFactory","SoundCloudFactory","PostType","$location","$sce","$timeout","UsersFactory",function(t,e,n,o,r,a,i,l,u,c,d){t.feed=[],t.checked=e,t.postType=i,t.loader=!1,angular.element(document).ready(function(e){t.loader=!0});var s=function(t,e,n){var o,r,a,i=[];return angular.forEach(t,function(t){var l=!0;"reddit"===e?t.url.endsWith(".jpg")?a={image_url:t.url.substring(5,t.length),type:"reddit",title:t.title,raw_time:t.created_utc,created_at:new Date(1e3*t.created_utc),displayTime:moment(new Date(1e3*t.created_utc)).fromNow(),url:"http://reddit.com"+t.permalink}:l=!1:"twitter"===e?a={text:t.text,created_at:new Date(t.created_at),displayTime:moment(new Date(t.created_at)).fromNow(),type:e,user:{screen_name:t.user.screen_name},id_str:t.id_str}:("instagram"===e||"soundcloud"===e)&&(t.embed?(r=u.trustAsHtml(t.embed),o=n?new Date(1e3*t.time):new Date(t.time),a={frame:r,created_at:o,displayTime:moment(o).fromNow(),type:e}):l=!1),l?i.push(a):null}),i};t.isValidUser=function(){var t=localStorage.getItem("at");return t?!0:void l.path("home")},t.getTweets=function(){o.getTweets().then(function(e){if(Array.isArray(e.data)){var n=s(e.data,"twitter");t.feed.push.apply(t.feed,n)}})},t.favTweet=function(t){o.favTweet(t).then(function(t){console.log(t)})},t.reTweet=function(t){o.reTweet(t).then(function(t){console.log(t)})},t.postTweet=function(t){for(var e=t.split(""),n=0;n<e.length;n++)switch(e[n]){case" ":e[n]="%20";break;case"@":e[n]="%40";break;case"#":e[n]="%23";break;case"&":e[n]="%26";break;case":":e[n]="&3A";break;case"/":e[n]="%2F";break;default:e[n]=e[n]}t=e.join(""),o.postTweet(t).then(function(t){console.log(t)})},t.getInstaFeed=function(){r.getInstaFeed().then(function(e){var n=s(e.data.data,"instagram",!0);t.feed.push.apply(t.feed,n),e.data.is_more_data&&t.getInstaFeed()})},t.getSoundFeed=function(){a.getSongs().then(function(e){var n=s(e.data.data,"soundcloud");t.feed.push.apply(t.feed,n),e.data.is_more_data&&t.getSoundFeed()})},t.getRedditFeed=function(){localStorage.redditToggle&&n.getRedditFeed().then(function(e){if(Array.isArray(e.data)){var n=s(e.data,"reddit");t.feed.push.apply(t.feed,n)}})},t.toggle=function(e){var o=!1;if("reddit"===e&&n.redditToggle===!1&&(n.redditToggle=!0),angular.forEach(t.feed,function(t){t.type===e&&(o=!0)}),o===!0)i[e]=!i[e];else{localStorage.getItem("at");switch(e){case"twitter":window.location.href="/activate";break;case"instagram":window.location.href="/igAuth";break;case"soundcloud":window.location.href="/sound";break;case"reddit":localStorage.redditToggle=!0,t.getRedditFeed()}}},t.refreshFeed=function(){window.history.go(0)},t.panelToggle=function(){e.checked=!e.checked},t.logout=function(){var t=localStorage.getItem("at");d.logout({at:t}).then(function(t){localStorage.clear(),l.path("home")})["catch"](function(t){console.log(t)})}}]),app.controller("HomeController",["$scope","UsersFactory","$location","$window",function(t,e,n,o){t.getHeight=function(){return o.innerHeight},t.$watch(t.getHeight,function(e,n){t.windowHeight=e}),t.verifier={errorz:""},t.logIn=function(o,r){var a={username:o,password:r};e.login(a).then(function(e){"Incorrect username or password."===e.data?(console.log("Incorrect username or password"),t.verifier.errorz="Incorrect username or password!",t.loginForm.$setPristine()):e.data.auth_token&&(console.log("Logged in.",e.data),localStorage.setItem("at",e.data.auth_token),n.path("feed"))})["catch"](function(t){throw t})},t.signUp=function(o,r){var a={username:o,password:r};e.signup(a).then(function(e){"User already exists."===e.data?(console.log("User already exists."),t.verifier.errorz="Incorrect username or password!",t.loginForm.$setPristine()):(console.log("User added.",e.data),localStorage.setItem("at",e.data.auth_token),n.path("feed"))})["catch"](function(t){throw t})}}]),app.controller("SliderController",["$scope","SliderFactory",function(t,e){t.stats={},e.getIgStats().then(function(e){t.stats.instagram={followers:e.data.counts.followed_by,following:e.data.counts.follows}}),e.getSoundcloudStats().then(function(e){t.stats.soundcloud={followers:e.data.followers_count,following:e.data.followings_count}}),e.getTwitterStats().then(function(e){t.stats.twitter={followers:e.followers.data.ids.length,following:e.following.data.ids.length}}),e.getFollowStats().then(function(e){t.stats=e})}]),app.filter("typeFilter",["PostType",function(t){return function(e){var n=[];return angular.forEach(e,function(e){t[e.type]===!1&&("instagram"===e.type&&window.instgrm.Embeds.process(),n.push(e))}),n}}]),app.directive("poseidon",["SliderFactory","$window","$timeout",function(t,e,n){return{restrict:"E",scope:{},link:function(e,n,o){var r=[],a=[],i=[],l=d3.select(n[0]).append("svg").style({width:"100%",height:"100%"}),u={soundcloud:["#FF5500",0],twitter:["#54aaec",0],instagram:["#325C86",0]};t.getFollowStats().then(function(t){var e=0,n=0;angular.forEach(t,function(t){u[t.media]&&u[t.media][1]++,t.counts&&(n+=t.counts.following,e+=t.counts.followers,r.push({type:t.media,followers:t.counts.followers}),a.push({type:t.media,following:t.counts.following}))}),i.push({type:"Total Followers",count:e}),i.push({type:"Total Following",count:n})}).then(function(){nv.addGraph(function(){var t=nv.models.pieChart().x(function(t){return t.type}).y(function(t){return t.followers}).color(function(t){return u[t.type][0]}).showLegend(!0).showLabels(!1).labelThreshold(.05).labelType("percent").donut(!0).donutRatio(.35);return d3.select("#pie svg").datum(r).transition().duration(350).call(t),t.valueFormat(d3.format("d")),t}),nv.addGraph(function(){var t=nv.models.pieChart().x(function(t){return t.type}).y(function(t){return t.following}).color(function(t){return u[t.type][0]}).showLegend(!0).showLabels(!1).labelThreshold(.05).labelType("percent").donut(!0).donutRatio(.35);return d3.select("#pie2 svg").datum(a).transition().duration(350).call(t),t.valueFormat(d3.format("d")),t}),nv.addGraph(function(){var t=nv.models.pieChart().x(function(t){return t.type}).y(function(t){return t.count}).showLegend(!0).showLabels(!1).labelThreshold(.05).labelType("percent").donut(!0).donutRatio(.35);return d3.select("#pie3 svg").datum(i).transition().duration(350).call(t),t.valueFormat(d3.format("d")),t})});var c=l.selectAll("image").data([0]);c.enter().append("svg:image").attr("xlink:href","../static/views/ONE.png").attr("x","0").attr("y","0").attr("width","100%").attr("height","150"),e.render=function(t){l.selectAll("*").remove()}}}}]);
//# sourceMappingURL=data:application/json;base64,
